name: Monitor External Repo and Notify via Bark

on:
  schedule:
    # 每小时运行一次，在整点运行
    - cron: '0 * * * *'
  workflow_dispatch: # 允许手动触发，方便测试

jobs:
  check_and_notify:
    runs-on: ubuntu-latest
    env:
      TARGET_REPO_OWNER: "iterativv"
      TARGET_REPO_NAME: "NostalgiaForInfinity"
      TARGET_BRANCH: "main"  # 目标分支
      HOURS_THRESHOLD: "6"   # 检查过去6小时的提交

    steps:

      - name: Checkout code (to access jq if needed)
        uses: actions/checkout@v4

      - name: Get commits from last 24 hours
        id: get_commits
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SINCE_TIME: $(date -u -d "24 hours ago" "+%Y-%m-%dT%H:%M:%SZ")
        run: |
          echo "========== 获取目标仓库最近提交 ==========" 
          
          # 获取过去24小时的提交，确保有足够的时间范围
          SINCE_TIME=$(date -u -d "24 hours ago" "+%Y-%m-%dT%H:%M:%SZ")
          API_URL="https://api.github.com/repos/${{ env.TARGET_REPO_OWNER }}/${{ env.TARGET_REPO_NAME }}/commits?sha=${{ env.TARGET_BRANCH }}&since=$SINCE_TIME"
          echo "API请求: $API_URL"
          
          # 获取提交
          COMMITS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "$API_URL")
          
          # 检查API响应
          if ! echo "$COMMITS" | jq -e 'type == "array"' > /dev/null; then
            echo "::error::获取提交信息失败"
            exit 1
          fi
          
          # 检查是否有提交
          COMMITS_COUNT=$(echo "$COMMITS" | jq '. | length')
          if [ "$COMMITS_COUNT" -eq 0 ]; then
            echo "过去24小时没有新提交"
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "成功获取到 $COMMITS_COUNT 条提交"
          echo "has_new_commits=true" >> $GITHUB_OUTPUT
          
          # 获取最新提交信息
          LATEST_SHA=$(echo "$COMMITS" | jq -r '.[0].sha')
          LATEST_MSG=$(echo "$COMMITS" | jq -r '.[0].commit.message' | head -n 1)
          LATEST_AUTHOR=$(echo "$COMMITS" | jq -r '.[0].commit.author.name')
          LATEST_URL=$(echo "$COMMITS" | jq -r '.[0].html_url')
          COMMIT_TIME=$(echo "$COMMITS" | jq -r '.[0].commit.author.date')
          
          echo "latest_sha=$LATEST_SHA" >> $GITHUB_OUTPUT
          echo "commit_msg=$LATEST_MSG" >> $GITHUB_OUTPUT
          echo "author_name=$LATEST_AUTHOR" >> $GITHUB_OUTPUT
          echo "commit_url=$LATEST_URL" >> $GITHUB_OUTPUT
          echo "commit_time=$COMMIT_TIME" >> $GITHUB_OUTPUT

      - name: Find commits within threshold
        id: find_recent_commits
        if: steps.get_commits.outputs.has_new_commits == 'true'
        run: |
          echo "========== 检查最近提交 ==========" 
          
          # 获取最近的提交时间
          COMMIT_TIME="${{ steps.get_commits.outputs.commit_time }}"
          COMMIT_TIMESTAMP=$(date -d "$COMMIT_TIME" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          
          # 计算小时差
          HOURS_DIFF=$(( ($CURRENT_TIMESTAMP - $COMMIT_TIMESTAMP) / 3600 ))
          echo "最近提交距离现在: $HOURS_DIFF 小时"
          
          # 检查是否在阈值内
          if [ "$HOURS_DIFF" -le "${{ env.HOURS_THRESHOLD }}" ]; then
            echo "发现在阈值内的提交，需要发送通知"
            echo "should_notify=true" >> $GITHUB_OUTPUT
            echo "hours_diff=$HOURS_DIFF" >> $GITHUB_OUTPUT
          else
            echo "没有在阈值内的提交，不需要发送通知"
            echo "should_notify=false" >> $GITHUB_OUTPUT
            echo "hours_diff=$HOURS_DIFF" >> $GITHUB_OUTPUT
          fi

      - name: Send Bark notification
        if: steps.find_recent_commits.outputs.should_notify == 'true'
        env:
          BARK_SERVER_URL: ${{ secrets.BARK_URL }} # 从 secrets 获取
          BARK_DEVICE_KEY: ${{ secrets.BARK_DEVICE_KEY }} # 从 secrets 获取
          LATEST_SHA: ${{ steps.get_commits.outputs.latest_sha }}
          COMMIT_MSG: ${{ steps.get_commits.outputs.commit_msg }}
          AUTHOR_NAME: ${{ steps.get_commits.outputs.author_name }}
          COMMIT_URL: ${{ steps.get_commits.outputs.commit_url }}
        run: |
          echo "发现最近更新，发送通知..."

          if [ -z "$BARK_SERVER_URL" ] || [ -z "$BARK_DEVICE_KEY" ]; then
            echo "Error: BARK_URL or BARK_DEVICE_KEY secret not set."
            exit 1
          fi

          BARK_TITLE_TEXT="GitHub: ${{ env.TARGET_REPO_OWNER }}/${{ env.TARGET_REPO_NAME }} Updated"
          BARK_BODY_TEXT="Branch: ${{ env.TARGET_BRANCH }} by $AUTHOR_NAME
          Commit: $(echo "$LATEST_SHA" | cut -c1-7)
          Message: $COMMIT_MSG"

          # URL 编码
          BARK_TITLE_ENCODED=$(printf %s "$BARK_TITLE_TEXT" | jq -sRr @uri)
          BARK_BODY_ENCODED_FOR_PATH=$(printf %s "$BARK_BODY_TEXT" | jq -sRr @uri)
          COMMIT_URL_ENCODED=$(printf %s "$COMMIT_URL" | jq -sRr @uri)

          BARK_REQUEST_URL="${BARK_SERVER_URL}/${BARK_DEVICE_KEY}/${BARK_BODY_ENCODED_FOR_PATH}"
          BARK_REQUEST_URL="${BARK_REQUEST_URL}?title=${BARK_TITLE_ENCODED}"
          BARK_REQUEST_URL="${BARK_REQUEST_URL}&url=${COMMIT_URL_ENCODED}"
          BARK_REQUEST_URL="${BARK_REQUEST_URL}&group=GitHubUpdates"
          BARK_REQUEST_URL="${BARK_REQUEST_URL}&copy=1"
          BARK_REQUEST_URL="${BARK_REQUEST_URL}&isArchive=1"
          # BARK_REQUEST_URL="${BARK_REQUEST_URL}&sound=minuet" # 可选：自定义提示音

          echo "Bark Request URL (DEBUG): ${BARK_REQUEST_URL}"

          HTTP_RESPONSE_CODE=$(curl -X GET "${BARK_REQUEST_URL}" -o /dev/null -s -w "%{http_code}")

          if [ "$HTTP_RESPONSE_CODE" -eq 200 ]; then
            echo "Bark notification sent successfully (HTTP $HTTP_RESPONSE_CODE)."
          else
            echo "Error sending Bark notification (HTTP $HTTP_RESPONSE_CODE)."
            exit 1
          fi


          
      - name: Summary
        run: |
          echo "========== 执行摘要 ==========" 
          echo "检查的仓库: ${{ env.TARGET_REPO_OWNER }}/${{ env.TARGET_REPO_NAME }}"
          echo "分支: ${{ env.TARGET_BRANCH }}"
          
          if [ "${{ steps.get_commits.outputs.has_new_commits }}" == "true" ]; then
            echo "最新提交SHA: ${{ steps.get_commits.outputs.latest_sha }}"
            echo "提交信息: ${{ steps.get_commits.outputs.commit_msg }}"
            echo "作者: ${{ steps.get_commits.outputs.author_name }}"
            echo "提交时间: 距离现在 ${{ steps.find_recent_commits.outputs.hours_diff || '0' }} 小时"
            echo "是否发送通知: ${{ steps.find_recent_commits.outputs.should_notify || 'false' }}"
            
            if [ "${{ steps.find_recent_commits.outputs.should_notify }}" == "true" ]; then
              echo "通知已发送"
            else
              echo "未发送通知 (提交时间超过阈值)"
            fi
          else
            echo "过去24小时内没有新提交"
          fi
